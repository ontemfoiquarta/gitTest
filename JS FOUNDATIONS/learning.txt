COMMAND LINE INTERFACE - 

1 - EDITING THE LINE:

	Command Lines include several features to make it easy to repeat previous commands.
	One of the most useful ways to edit the line is to "up arrow", which simply retrieves 
	the previous command.
	
	Other common ways to edit the line use the control key, generally paired with
	"A", "E" or "U". [CTRl A] takes us to the beggining of the line, [CTRL E] takes us 
	to the end of the line and [CTRL U] clears to the beggining of the line and
	lets us start over.

1.1 - CLEANING UP:

	When using the command line sometimes it's convenient to be able to clean up by clearing
	the screen, we can by using [Clear] ou [CRTL L]

	Similarly, when we are done the a terminal window and are ready to exit we can use the
	[Exit] command or use the shortcut [CTRL D]


GIT BASICS

2 - GIT CHEATSHEET

Commands related to a remote repository:

	git clone git@github.com:USER-NAME/REPOSITORY-NAME.git
	git push or git push origin main (Both accomplish the same goal in this context)


Commands related to the workflow:

	git add .
	git commit -m "A message describing what you have done to make this snapshot different"


Commands related to checking status or log history

	git status
	git log



The basic Git syntax is program | action | destination.

For example,

	git add . is read as git | add | ., where the period represents everything in the current directory;
	git commit -m "message" is read as git | commit -m | "message"; and
	git status is read as git | status | (no destination).


JS FOUNDATIONS

1 - VARIABLES & OPERATORS

1.1 HOW TO RUN JAVASCRIPT CODE

	The majority of JS we will be writting in the FOUNDATIONS course will be run via the browser.
	Later lessions in FOUNDATIONS and the NODEJS path will show us how to run JS outside the 
	browser environment.

	The simplest way to get started is to create an HTML file (like we already did) with the 
	Javascript code inside of it. Think like inline CSS but for JS.
	We can write JS inside <script> tags.

	Another, more organized way, of including Javascript in a webpage is through an external script. 
	This is very similar to linking external CSS docs to our website.

1.2 VARIABLES

	Variables are the building blocks of any program. You can think of variables as "storage containers"
	for data in our code. A bit like DIVs in CSS but with more logic involved.

	We can declare variable by using the [let] keyword.

	We can also re-assign [let] variables.

		let age = 11;
	console.log(age); // outputs 11 to the console

		age = 54;
 
	console.log(age); // outputs 54 to the console

	Since the variable had alreay been declared we are just re-assigining its value.


	If, however, we wanted a "variable" whose value was constant we can acheive that by using the 
	[const] keyword.

		const pi = 3.14;

		pi = 10;

	console.log(pi); // What will be output?

	Since we declared a constant value earlier we would expect the console.log returned a 3.14. that
	was no the case. Whenever we try to re-assign a constant value JS will automatically print
	an error code and wont even try to make the operation.

	There is a third way to declare variables. The original way variables were declared was by 
	using [var]. [var] and [let] are similar in purpose and capability. [var], however, has some
	quirks and misuses that [let] doesn't, By and large, [var] is not used anymore.


1.3 NUMBERS	

	Numbers are the building blocks of programing logic. Every single program involves at least some
	math.
	Javascript reads and interprets mathematical expressions and mathematical language. If we
	put it inside console.log it'll evalute the expression and output the correct number.


1.4 Javascript math

	We use different terms to describe different types of decimal numbers, for example:

	INTEGERS are numbers without fractional part. They can either be positive or negative (10,400, -5).
	
	FLOATING POINT NUMBERS (FLOATS) have decimal points and decimal places, for example 12.5 and
	56.77865

	We eve have different types of number systems. Decimal is base 10 (meaning it uses 0-9 in each digit),
	but we also have things like:

	Binary - The lowest level of language; 0s and 1s;
	Octal - Base 8, uses 0-7 in each digit;
	Hexadecimal - Base 16, uses 0-9 and then a-f in each digit. Some types of colors are coded
	using Hexadecimal notation.


	Javascript, unlike other programming languages only has one data type for numbers, both integers, and
	decimals, and it's called [NUMBER]. This means whatever type of numbers we are dealing with in 
	JS, we handle them in the same way.

1.4.1 - Converting to number data types

		Sometimes we end up with a number that is stored as a string type, which makes it 
		difficult to perform calculation with. This most commonly happens when data is entered into
		a form input, and the input type is text. We can, however, solve this problem --
		passing the string value into a Number() constructor to return a number version of the same
		value. 

			let myNumber = "74";
			myNumber = Number(myNumber) + 3;
			console.log (myNumber);


1.5 Arithmetic Operators 

	We perform mathematical operations in JS with the help of these operators:

	+ | Addition | Adds two numbers together | 6+9
	- | Subtraction| Subtracts the right from the left | 20-15
	* | Multiplication | Multiples two numbers | 3*7
	/ | Divison | Divides the left by the right | 10/5
	% | Remainder/Modulo | Returns an integer from the remainder of the division | 8 % 3 = 2
	**| Exponent | Raises a base number to the exponent power | 5**2 === 25 === 5*5



1.6 Assignment Operators

	Assignment operators are operatores that assign a value to a variable. We have already
	used the most basic one, =, - it assigns the variable on the left the value stated on the right.

	-> But there are some more complex types:

	+= | Adds the value on the right to the variable value on the left and returns the new variable.

	-= | Subtracts the value on the right to the variable value on the left and returns the new 
		 variable.

	*= | Multiplies the value on the right to the variable value on the left and returns the new 
		 variable.	 

	/= | Divides the value on the right to the variable value on the left and returns the new 
		 variable.	 	 


1.7 Comparison Operators

	Sometimes we want to run true/false tests, then act accordingly depending on the result
	of that test - to do this we use Comparions Operators.

	=== | Strict Equality | Tests whether the left and right values are equal (both in value and data
		  type).

	!== | Strict Non-Equality | Tests whether values are not equal from left to right

	<	| Less Than | Tests whether the left value is smaller than the right one.

	>	| Greater than | Tests whether the left value is greater than the right one.

	<=	| Less than or equal to

	>=	| Greater than or equal to

	
	If we try entering some of these values in a console, we'll see they all return as 
	[true] or [false] meaning they are boolean statements. These are very useful, as they allow us
	to make decisions in our code, and they are used every time we want to make a choice of 
	some kind. Booleans can be used to:

		-	Display the correct text label on a button, if a feature is on or off;
		-	Display a game over message it a game is over or victory message if the game has been won;
		-	Display the correct season greeting on what holiday seaon it is;
		-	Zoom a map in or out depending on what zoom level is selected.


2 - DATA TYPES & CONDITIONALS

	2.1 DATA TYPES

		A value in Javascript is always of a certain type. For example, a string or a number.
		There are 8 basic data types in Javascript.
		We can put any type of data in a variable and we can even declare a variable as 
		a data type and then assign it to another data type. 
		 
		 //
		 let message = "hello";
		 message = 123456;

		 This means Javascript is a dynamically typed language, meaning that there exist data types,
		 but variable are not bound to any of them.


		 2.1.1 NUMBERS

		 	The number type represent both integers and floats (whole and decimal numbers).
			There are many operations for numbers, division, addition, subtraction, multiplication,
			and so on.

			Beside regular numbers, there are the so called "special numeric values", also
			belonging to this data type. They are, infinity, - infinity and NaN (Not a Number).
				
				NaN represents a computational error. It is the result of an incorrect or undefined
				mathematical operation, for example:

				//
				alert("not a number" / 2): // Nan, such division is erroneous.

		 2.1.2 STRINGS		

		 	Strings are sets of characters surronded by quotes.

			In Javascript, there are 3 types of quotes:

			1 - Double Quotes: "Hello"
			2 - Single Quotes: 'Hello'
			3 - Backticks: `Hello`

			Double and Single quotes are virtually the same.

			Backticks, however, are "extended functionality" quotes. They allow us to embed Variables
			and expressions into a string by wrapping them in ${...}, for example:

			//
			let name = "João";

			// embed a variable
			alert (`Hello, ${name}!`): //Hello, João!

			//embed an expression
			alert (`the result iss ${1+2}`); // the result is 3


			The expression inside ${...} is evaluated and the result becomes part of the string.
			We can put anything in there: a variable like name or an arithmetic expression like 1 + 2
			or even something more complex.
			Backticks also respect the line breaks in source code meaning we can strings that
			span multiple lines whitout having to use [\n] to break the line.


		 2.1.3 BOOLEANS

		 	The Boolean data type only has two possible valus: [true] & [false].
			This type is commonly used to store yes/no vales where [true] means "yes, correct"
			and [false] means "no, incorrect".

			//
			let isGreater = 4 > 1;
			alert (isGreater); // true (the comparison result is "yes")


		 2.1.4 NULL

		 	The special null value does no belong to any of the types described above.
			It forms a separate type of its own which contains only the null value

			//
			let age = null;
			//

			In Javascript, null is not a reference to a non-existing object or a null point like
			in some other languages.
			
			It's just a special value that represent "nothing", "empty" or "value unknown".
			The code above stakes that [age] is unknown.


		 2.1.5 UNDEFINED 

		 	Just like null, undefined also stands apart as a singular special value.
			In this case [undefined], mnore often than not represents the default value for a 
			variable. 

			//
			let age;
			alert(age); // shows "undefined".

			The variable is declared but not assigned. It is not common to purposely assing a variable
			as undefined, it just starts as one.

		 
		 2.1.6/7 OBJECTS & SYMBOLS

		 	Objects are more complex data structures. One example of Object are methods like [Math]. 
			It contains, whithin itself more data than the what it shows on the surface.

			Symbols are unique identifiers for objects. 


		 2.1.8 BIGINT

		 The BigInt type was recently added to represent integers of arbitrary lenght Since Javascript
		 begins to have precision errors when Numbers are larger than 64 bit storage.

		 
	 
	 2.2 NUMBERS VS STRINGS


		 	//
		 	const name = "Front ";
		 	const number = 242;
		 	console.log (name + number); // "Front 242";
		 	//

		 When we try to concatenate a string and a number the result will always be displayed
		 as a string by default. We can, however, change this by using two types of functions:

		 
		 The Number() function converts anything passed to into into a number.

			//
			const myString = "123";
			const myNum = Number(myString);
			console.log(typeof myNum);
			// number
		 
		 Conversely, the String() function converts its argument to a string.

		 	//
			const myNum2 = 123;
			const myString2 = String(myNum2);
			console.log(type myString2);
			// string

		 
		 These constructs can be really useful in some situations. For example, if a user 
		 enters a number into a form's text field, it's a string, However, if you want to 
		 add this number to something, you'll need it to be a number, so you could pass it
		 through Number() to handle this.		

	
	 2.2 SWITCH STATEMENTS 

	 	 An alterative do If/else statements. It can replace multiple
		 if checks and it gives a more descriptive way to compare a value
		 with multiple variants.

		 Syntax:

		 const favoriteAnimal = "jaguar"

		 switch (favoriteAnimal) {
			
    		case "jaguar":
        		console.log ("eww")
        		break

    		case "dog":
        		console.log ("yay")
         		break

			 default:
			 	console.log ("I don't know that one")	

}


		 The value of favoriteAnimal is checked for a strict equality (===) to the 
		 value from the first [case].
		 If the equality is found switch starts to execute the code from the corresponding
		 [case] until the nearest [break] or until the end of the switch (meaning if we
		 forget to break the code it will pass every case after the equal).

		 if no case is matched then the [default] code is executed (if it exists).

		 
 3 - FUNCTIONS
		3.1 BASICS

			Let's start with an example:

			function favoriteAnimal(animal) {
    			return animal + " is my favorite animal!"
			}

			console.log(favoriteAnimal('Goat'))

		In Javascript, parameters are the items listed between parentheses in the
		function declaration. In this case our parameter is [animal] and we are 
		telling Javascript we will send some value to our favoriteAnimal function.
		This means that [animal] is just a placeholder for some future values.

		the last line, favoriteAnimal("Goat") is where we are calling our favoriteAnimal
		function and passing the value of "Goat". Here, "Goat" is our argument and we
		will be sending that string to where [animal] is. In this case, and since this 
		function only aims at returnig a string of [parameter + string], Whenever
		we call this function it will print a string.